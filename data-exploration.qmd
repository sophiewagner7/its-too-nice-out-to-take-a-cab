---
title: "data-exploration"
editor: visual
---

```{r}
library(arrow)  # reading parquet file
library(ggplot2)  # plotting
library(dplyr)  # data manipulation
library(lubridate)  # working with dates
library(patchwork)  # put plots together
library(scales)  # format scales
library(tidyverse) # pivot
library(GGally) # ggparcoord
df <- read_parquet("data/complete_weather_and_taxi_data.parquet")
```
```{r}
df$pre_pandemic <- ifelse(df$date < as.Date("2020-03-01"),T,F)
df$post_pandemic <- ifelse(df$date >= as.Date("2021-10-01"), T, F)
df$pandemic <- ifelse(df$date >= as.Date("2020-03-01") & df$date < as.Date("2021-10-01"), T, F)
```

## March 2020

```{r}
df_mar2020 <- df |> 
  filter (date >= as.Date("2020-03-01") & date < as.Date("2020-04-01"))

df_mar2020 |> 
    group_by(date) |> 
    summarize(total_trips_day = sum(trip_count),
              avg_trips_day = mean(total_trips_day)) |> 
    ggplot(aes(x=date, y=avg_trips_day)) +
        geom_point(color="cornflowerblue") +
        geom_line(color="cornflowerblue") + 
        scale_y_continuous(label = scales::comma) +
        labs(title="Average daily taxi trips, March 2020",
             x = "Date", 
             y = "Average number of trips in a day") +
        theme_classic()
```

## Average trips by day of the week and month

```{r}
dfsum <- df |> 
  mutate(day=wday(date, label=T),
         month=month(date, label=T),
         year=year(date)) |> 
  group_by(year,month,day) |>
  summarize(avg_trips = mean(trip_count))
ggplot(dfsum, aes(x=as.factor(day), y=as.factor(month), fill=avg_trips)) +
         geom_tile(color="white") + 
         scale_fill_gradient(low = "white", high = "red", name = "N trips") +
         labs(
          title = "Average trips by day of the week and month, Jan 2019 - Jul 2024",
          x = "Day of the week",
          y = "Month") +
        theme_classic() 
```

```{r}
#| fig-height: 7
#| fig-width: 7
plot1 <- df |> 
  filter(pre_pandemic==T) |> 
  mutate(day=wday(date, label=T),
         month=month(date, label=T),
         year=year(date)) |> 
  group_by(year,month,day) |>
  summarize(avg_trips = mean(trip_count)) |>
  ggplot(aes(x=as.factor(day), y=as.factor(month), fill=avg_trips)) +
  geom_tile(color="white") +
  scale_fill_gradient(low = "white", high = "red", name = "N trips") +
  labs(title = "Pre-pandemic (Jan 2019 - Feb 2020)", x = "Day of the week", y = "Month") +
  theme_minimal() +
    theme(plot.title = element_text(size=11),
        legend.key.size = unit(0.5, 'cm'),
        legend.title = element_text(size=10))
  
plot2 <- df |> 
  filter(post_pandemic==T) |> 
    mutate(day=wday(date, label=T),
         month=month(date, label=T),
         year=year(date)) |> 
  group_by(year,month,day) |>
  summarize(avg_trips = mean(trip_count)) |> 
  ggplot(aes(x=as.factor(day), y=as.factor(month), fill=avg_trips)) +
  geom_tile(color="white") +
  scale_fill_gradient(low = "white", high = "red", name = "N trips") +
  labs(title = "Post-pandemic (Oct 2021 - Jul 2024)", x = "Day of the week", y = "Month") +
  theme_minimal() +
  theme(plot.title = element_text(size=11),
        legend.key.size = unit(0.5, 'cm'),
        legend.title = element_text(size=10))

(plot1 / plot2) + plot_annotation(title="Average number of trips by day of the week and month")
```

## Average trips by day of the week, month, and year

```{r}
#| fig-width: 10
dfsum <- df |> 
  mutate(day = wday(date, label = TRUE), 
         month = month(date, label = TRUE),
         year = year(date)) |> 
  group_by(year, month, day) |>
  summarize(avg_trips = mean(trip_count), .groups = 'drop')

dfsum <- dfsum |> 
  mutate(day = factor(substr(day, 1, 2), 
                      levels = c("Su", "Mo", "Tu", "We", "Th", "Fr", "Sa")))

ggplot(dfsum, aes(x = day, y = month, fill = avg_trips)) +
  geom_tile(color = "white") + 
  scale_fill_gradient(low = "white", high = "red", name = "Avg Trips") +
  labs(
    title = "Average Trips by Day of the Week and Month",
    x = "Day of the Week",
    y = "Month"
  ) +
  theme_minimal() +
  facet_wrap(~year, ncol=6)
```

## Average trips by day of week & hour of day

```{r}
#| fig-height: 7
#| fig-width: 7
plot1 <- df |> 
  filter(pre_pandemic==T) |> 
  mutate(day = wday(date, label = TRUE))|> 
  group_by(day, hour) |>
  summarize(avg_trips = mean(trip_count), .groups = 'drop') |> 
  ggplot(aes(x = day, y = hour, fill = avg_trips)) +
  geom_tile(color = "white") + 
  scale_fill_gradient(low = "white", high = "red", name = "N Trips") +
  labs(
    title = "Pre-pandemic (Jan 2019 - Feb 2020)",
    x = "Day of the Week",
    y = "Hour"
  ) +
  scale_y_continuous(breaks=seq(0,23, by=3))+
  theme_minimal()+
    theme(plot.title = element_text(size=11),
        legend.key.size = unit(0.5, 'cm'),
        legend.title = element_text(size=10))

plot2 <- df |> 
  filter(post_pandemic==T) |> 
  mutate(day = wday(date, label = TRUE))|> 
  group_by(day, hour) |>
  summarize(avg_trips = mean(trip_count), .groups = 'drop') |> 
  ggplot(aes(x = day, y = hour, fill = avg_trips)) +
  geom_tile(color = "white") + 
  scale_fill_gradient(low = "white", high = "red", name = "N Trips") +
  labs(
    title = "Post-pandemic (Oct 2021-Jul 2024)",
    x = "Day of the Week",
    y = "Hour"
  ) +
  scale_y_continuous(breaks=seq(0,23, by=3))+
  theme_minimal()+
    theme(plot.title = element_text(size=11),
        legend.key.size = unit(0.5, 'cm'),
        legend.title = element_text(size=10))

(plot1 / plot2) + plot_annotation(title="Average number of trips by day of the week and hour")
```


# Exploration round 2: comparing ridership and weather changes

```{r}
df$rain <- as.factor(ifelse(df$precipitation != 0, T, F))
```

Looking at a slice of the data:
```{r}
df |> 
  filter(date >= as.Date("2023-03-01") & date <= as.Date("2023-06-01") & rain==T) |> 
  ggplot(aes(x=date, y=precipitation)) +
  geom_col()
```
```{r}
df |> 
  filter(date >= as.Date("2023-05-01") & date <= as.Date("2023-06-01")) |> 
  mutate(day = wday(date, label = TRUE),
         week_start=lubridate::floor_date(date, unit="week"))|> 
  ggplot(aes(x = day, y = hour, fill = precipitation_change_since_prev_day)) +
  geom_tile(color = "white") + 
  scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0, 
                       name = "Precipitation\nChange") +
  labs(
    title = "Precipitation change may 2023",
    x = "Day of the Week",
    y = "Hour"
  ) +
  scale_y_continuous(breaks=seq(0,23, by=3))+
  theme_classic()+
  facet_wrap(~week_start, ncol=5)
```

```{r}
df |> 
  filter(date >= as.Date("2023-05-01") & date <= as.Date("2023-06-01")) |> 
  mutate(day = wday(date, label = TRUE),
         week_start=lubridate::floor_date(date, unit="week"))|> 
  ggplot(aes(x = day, y = hour, fill = trip_count_change_since_prev_week)) +
  geom_tile(color = "white") + 
  scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0, 
                       name = "Trip ct change") +
  labs(
    title = "Trip count change may 2023",
    x = "Day of the Week",
    y = "Hour"
  ) +
  scale_y_continuous(breaks=seq(0,23, by=3))+
  theme_classic()+
  facet_wrap(~week_start, ncol=5)
```

```{r}
df |> 
  filter(date >= as.Date("2023-05-01") & date <= as.Date("2023-06-01")) |> 
  mutate(day = wday(date, label = TRUE),
         week_start=lubridate::floor_date(date, unit="week"))|> 
  ggplot(aes(x = day, y = hour, fill = trip_distance_mean_change_since_prev_week)) +
  geom_tile(color = "white") + 
  scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0, 
                       name = "Trip distance \nchange") +
  labs(
    title = "Trip mean distance change may 2023",
    x = "Day of the Week",
    y = "Hour"
  ) +
  scale_y_continuous(breaks=seq(0,23, by=3))+
  theme_classic()+
  facet_wrap(~week_start, ncol=5)
```

## ggparcoord: change in rain, change in travel 

Difficult to tell anything from these plots. Let's take a look using `ggparcoord`. 

```{r}
col_indices <- match(c("precipitation_change_since_prev_day", "trip_count_change_since_prev_week", "trip_distance_mean_change_since_prev_week"), colnames(df))  # Get col indices
df |> 
  filter(date >= as.Date("2023-05-01") & date < as.Date("2023-06-01")) |> 
  mutate(rained = as.factor(ifelse(precipitation != 0, "Rain", "No rain"))) |> 
  rename(
    Precipitation_Change = precipitation_change_since_prev_day,
    Trip_Count_Change = trip_count_change_since_prev_week,
    Trip_Distance_Change = trip_distance_mean_change_since_prev_week
  ) |> 
  ggparcoord(columns = col_indices, groupColumn = "rained", alphaLines = 0.3, scale = "uniminmax") +
  labs(title="All hours May 2023",y = "Normalized values") +
  theme_minimal()
```
Only looking at days it rained:

```{r}
df |> 
  filter(date >= as.Date("2021-10-01") & precipitation_change_since_prev_day !=0) |> 
  mutate(rained = as.factor(ifelse(precipitation != 0, "Rain", "No rain"))) |> 
  rename(
    Precipitation_Change = precipitation_change_since_prev_day,
    Trip_Count_Change = trip_count_change_since_prev_week,
    Trip_Distance_Change = trip_distance_mean_change_since_prev_week
  ) |> 
  ggparcoord(columns = col_indices, groupColumn = "rained", alphaLines = 0.3, scale = "uniminmax") +
  labs(title="Days with change in precipitation", y = "Normalized values") +
  theme_minimal()
```

## Rush hour, work days, etc.

Creating rush hour variable:
```{r}
library(timeDate)

all_dates <- seq.Date(as.Date("2019-01-01"), as.Date("2024-12-31"), by = "day")
us_holidays <- as.Date(holidayNYSE(c(2019:2024)))

get_columbus_day <- function(year) {
  october_dates <- seq.Date(as.Date(paste(year, "10-01", sep = "-")), as.Date(paste(year, "10-31", sep = "-")), by = "day")
  mondays <- october_dates[weekdays(october_dates) == "Monday"]
  mondays[2]
}
get_black_friday <- function(year) {
  november_dates <- seq.Date(as.Date(paste(year, "11-01", sep = "-")), as.Date(paste(year, "11-30", sep = "-")), by = "day")
  thursdays <- november_dates[weekdays(november_dates) == "Thursday"]
  thanksgiving <- thursdays[4] 
  thanksgiving + 1 
}
christmaseve_to_new_years <- unlist(lapply(2019:2024, function(year) {
  seq.Date(as.Date(paste(year, "12-24", sep = "-")), as.Date(paste(year, "12-31", sep = "-")), by = "day")
}))

columbus_days <- sapply(2019:2024, get_columbus_day)
black_fridays <- sapply(2019:2024, get_black_friday)

working_days <- all_dates[
  !weekdays(all_dates) %in% c("Saturday", "Sunday") & 
  !(all_dates %in% us_holidays) & 
  !(all_dates %in% columbus_days) & 
  !(all_dates %in% black_fridays) & 
  !(all_dates %in% christmaseve_to_new_years) & 
  (format(as.Date(all_dates), "%m-%d") != "11-11")
]

df$working_day <- ifelse(df$date %in% working_days, T, F)
df$rush_hour <- ifelse(df$working_day==T & df$hour %in% c(7,8,9,17,18,19), T, F)
```

Creating indicator for working day (not federal holiday/typical time-off holiday).`timeDate::holidayNYSE()` didn't supply some holidays I thought should be included in the list, so I manually added -- wanted to limit possible fluctuations in data. Could potentially remove entire week bt christmas and new years. Then created `rush_hour` indicator, subset only to working days, hours 7am-9am, 5pm-7pm. After doing this, I checked dates where the count was abnormally low (by looking at histogram and then printing dates) and found that consistently Black Friday and the week bt christmas and ny was low, so added these as "non-working-days"

```{r}
df |> 
  filter(pandemic==F) |> 
  ggplot(aes(x=trip_count, color=rush_hour))+
  geom_boxplot() +
  facet_wrap(~post_pandemic, ncol=1) +
  labs(title = "Mean trip distance by Rush Hour status, pre and post pandemic")
```

```{r}
df |> 
  filter(pandemic==F) |> 
  filter(rush_hour==T) |> 
  ggplot(aes(x=trip_count, color=rain))+
  geom_boxplot() +
  facet_wrap(~post_pandemic, ncol=1) +
  labs(title = "Trip count distribution by Rain status, pre and post pandemic")
```
```{r}
df |> 
  filter(pandemic==F) |> 
  filter(rush_hour==T) |> 
  ggplot(aes(x=trip_distance_mean, color=rain))+
  geom_boxplot() +
  facet_wrap(~post_pandemic, ncol=1)+
  labs(title = "Mean trip distance by Rain status, pre and post pandemic")
```



```{r}
df$evening_rush <- ifelse(df$rush_hour==T & df$hour > 12, T, F)
df$morning_rush <- ifelse(df$rush_hour==T & df$hour < 12, T, F)
```


## Difference in average trips if its raining vs not (reference)

```{r}
#| fig-height: 7
#| fig-width: 7
rain_diff <- df |> 
  filter(date < as.Date("2020-03-01")) |> 
  mutate(day = wday(date, label = TRUE)) |> 
  group_by(day, hour, rain = precipitation != 0) |> 
  summarize(avg_trips = mean(trip_count), .groups = "drop") |> 
  pivot_wider(names_from = rain, values_from = avg_trips, names_prefix = "rain_") |> 
  mutate(diff = rain_TRUE - rain_FALSE)

plot1<- ggplot(rain_diff, aes(x = day, y = hour, fill = diff)) +
  geom_tile(color = "white") +
  scale_fill_gradient2(
    low = "blue", mid = "white", high = "red", midpoint = 0, 
    name = "Difference\n(Trips)"
  ) +
  labs(
    title = "Difference in Avg Trips: Raining vs Not Raining (Pre pandemic)",
    x = "Day of the Week",
    y = "Hour"
  ) +
  scale_y_continuous(breaks = seq(0, 23, by = 3)) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 11),
    legend.key.size = unit(0.5, "cm"),
    legend.title = element_text(size = 10)
  )
rain_diff <- df |> 
  filter(date >= as.Date("2021-10-01")) |> 
  mutate(day = wday(date, label = TRUE)) |> 
  group_by(day, hour, rain = precipitation != 0) |> 
  summarize(avg_trips = mean(trip_count), .groups = "drop") |> 
  pivot_wider(names_from = rain, values_from = avg_trips, names_prefix = "rain_") |> 
  mutate(diff = rain_TRUE - rain_FALSE)

plot2 <- ggplot(rain_diff, aes(x = day, y = hour, fill = diff)) +
  geom_tile(color = "white") +
  scale_fill_gradient2(
    low = "blue", mid = "white", high = "red", midpoint = 0, 
    name = "Difference\n(Trips)"
  ) +
  labs(
    title = "Difference in Avg Trips: Raining vs Not Raining (Post pandemic)",
    x = "Day of the Week",
    y = "Hour"
  ) +
  scale_y_continuous(breaks = seq(0, 23, by = 3)) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 11),
    legend.key.size = unit(0.5, "cm"),
    legend.title = element_text(size = 10)
  )
plot1/plot2
```

### Rush hour only

```{r}
rain_diff <- df |> 
  filter(date >= as.Date("2021-10-01")) |> 
  filter(rush_hour==T) |> 
  mutate(day = wday(date, label = TRUE)) |> 
  group_by(day, hour, rain = precipitation != 0) |> 
  summarize(avg_trips = mean(trip_count), .groups = "drop") |> 
  pivot_wider(names_from = rain, values_from = avg_trips, names_prefix = "rain_") |> 
  mutate(diff = rain_TRUE - rain_FALSE)

plot1<-ggplot(rain_diff, aes(x = day, y = hour, fill = diff)) +
  geom_tile(color = "white") +
  scale_fill_gradient2(
    low = "blue", mid = "white", high = "red", midpoint = 0, 
    name = "Difference\n(Trips)"
  ) +
  labs(
    title = "Difference in Avg Trips: Raining vs Not Raining (Post pandemic)",
    x = "Day of the Week",
    y = "Hour"
  ) +
  scale_y_continuous(breaks = seq(0, 23, by = 3)) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 11),
    legend.key.size = unit(0.5, "cm"),
    legend.title = element_text(size = 10)
  )
rain_diff <- df |> 
  filter(date < as.Date("2020-03-01")) |> 
  filter(rush_hour==T) |> 
  mutate(day = wday(date, label = TRUE)) |> 
  group_by(day, hour, rain = precipitation != 0) |> 
  summarize(avg_trips = mean(trip_count), .groups = "drop") |> 
  pivot_wider(names_from = rain, values_from = avg_trips, names_prefix = "rain_") |> 
  mutate(diff = rain_TRUE - rain_FALSE)

plot2 <- ggplot(rain_diff, aes(x = day, y = hour, fill = diff)) +
  geom_tile(color = "white") +
  scale_fill_gradient2(
    low = "blue", mid = "white", high = "red", midpoint = 0, 
    name = "Difference\n(Trips)"
  ) +
  labs(
    title = "Difference in Avg Trips: Raining vs Not Raining (Pre pandemic)",
    x = "Day of the Week",
    y = "Hour"
  ) +
  scale_y_continuous(breaks = seq(0, 23, by = 3)) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 11),
    legend.key.size = unit(0.5, "cm"),
    legend.title = element_text(size = 10)
  )

plot2/plot1
```

## Cleveland dot plots :: difference based on Rain status

Does it vary by month of the year? (i.e. seasons have an impact?)
Filtered to RUSH HOUR ONLY & working days only to maintain some constancy

```{r}
df |> 
  filter(rush_hour == TRUE & post_pandemic == TRUE) |> 
  mutate(month = month(date, label = TRUE)) |> 
  group_by(month, rain) |> 
  summarize(avg_dist = mean(trip_distance_mean), .groups = 'drop') |> 
  pivot_wider(names_from = rain, values_from = avg_dist, names_prefix = "rain_") |> 
  ggplot() +
  geom_segment(
    aes(x = rain_FALSE, xend = rain_TRUE, 
        y = month, yend = month, 
        color = "Difference"),
    size = 1
  ) +
  geom_point(aes(x = rain_TRUE, y = month, color = "TRUE")) +
  geom_point(aes(x = rain_FALSE, y = month, color = "FALSE")) +
  scale_color_manual(
    values = c("TRUE" = "blue", "FALSE" = "red", "Difference" = "red"),
    name = "Legend"
  ) +
  labs(title="Impact of rain on avg dist of rush hr trips by month", x = "Average Distance", y = "Month") +
  theme_minimal()
```


```{r}
df |> 
  filter(rush_hour == TRUE & post_pandemic == TRUE) |> 
  mutate(month = month(date, label = TRUE)) |> 
  group_by(month, rain) |> 
  summarize(avg_dur = mean(trip_duration_mean), .groups = 'drop') |> 
  pivot_wider(names_from = rain, values_from = avg_dur, names_prefix = "rain_") |> 
  mutate(
    line_color = case_when(
      rain_TRUE > rain_FALSE ~ "Increase in duration if rain",
      rain_TRUE < rain_FALSE ~ "Decrease in duration if rain",
      TRUE ~ "Equal"
    )
  ) |> 
  ggplot() +
  geom_segment(
    aes(x = rain_FALSE, xend = rain_TRUE, 
        y = month, yend = month, 
        color = line_color),
    size = 1
  ) +
  geom_point(aes(x = rain_TRUE, y = month), color = "blue", size = 1.5) +
  geom_point(aes(x = rain_FALSE, y = month), color = "red", size = 1.5) +
  scale_color_manual(
    values = c("Increase in duration if rain" = "blue", 
               "Decrease in duration if rain" = "red", 
               "Equal" = "grey"),
    name = "Comparison"
  ) +
  labs(title="Impact of rain on avg duration of rush hr trips by month", x = "Average Duration", y = "Month") +
  theme_minimal()
```

```{r}
df |> 
  filter(rush_hour == TRUE & post_pandemic == TRUE) |> 
  mutate(month = month(date, label = TRUE)) |> 
  group_by(month, rain) |> 
  summarize(avg_trips = mean(trip_count), .groups = 'drop') |> 
  pivot_wider(names_from = rain, values_from = avg_trips, names_prefix = "rain_") |> 
  mutate(
    line_color = case_when(
      rain_TRUE > rain_FALSE ~ "Increase in n trips if rain",
      rain_TRUE < rain_FALSE ~ "Decrease in n trips if rain",
      TRUE ~ "Equal"
    )
  ) |> 
  ggplot() +
  geom_segment(
    aes(x = rain_FALSE, xend = rain_TRUE, 
        y = month, yend = month, 
        color = line_color),
    size = 1
  ) +
  geom_point(aes(x = rain_TRUE, y = month), color = "blue", size = 1.5) +
  geom_point(aes(x = rain_FALSE, y = month), color = "red", size = 1.5) +
  scale_color_manual(
    values = c("Increase in n trips if rain" = "blue", 
               "Decrease in n trips if rain" = "red", 
               "Equal" = "grey"),
    name = "Comparison"
  ) +
  labs(title="Impact of rain on avg num rush hr trips by month", x = "Average N Trips", y = "Month") +
  theme_minimal()
```

