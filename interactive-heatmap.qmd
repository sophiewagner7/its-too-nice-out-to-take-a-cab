---
title: "Interactive Heatmap"
format: html
runtime: shiny
---

## Heatmap for average rides / interaction with rain, temp, season 

```{r setup, include=FALSE}
library(shiny)
library(tidyverse)
library(plotly)
library(arrow)
library(dplyr)  # data manipulation
library(timeDate)
library(lubridate)

df <- read_parquet("data/complete_weather_and_taxi_data.parquet")

# Generate working days
all_dates <- seq.Date(as.Date("2019-01-01"), as.Date("2024-12-31"), by = "day")
us_holidays <- as.Date(holidayNYSE(c(2019:2024)))

get_columbus_day <- function(year) {
  oct <- seq.Date(as.Date(paste(year, "10-01", sep = "-")), as.Date(paste(year, "10-31", sep = "-")), by = "day")
  columbus_day <- oct[weekdays(oct) == "Monday"][2]
  columbus_day
}

get_black_friday <- function(year) {
  nov <- seq.Date(as.Date(paste(year, "11-01", sep = "-")), as.Date(paste(year, "11-30", sep = "-")), by = "day")
  thanksgiving <- nov[weekdays(nov) == "Thursday"][4]
  thanksgiving + 1
}

christmaseve_to_new_years <- unlist(lapply(2019:2024, function(year) {
  seq.Date(as.Date(paste(year, "12-24", sep = "-")), as.Date(paste(year, "12-31", sep = "-")), by = "day")
}))

columbus_days <- sapply(2019:2024, get_columbus_day)
black_fridays <- sapply(2019:2024, get_black_friday)

working_days <- all_dates[
  !weekdays(all_dates) %in% c("Saturday", "Sunday") & 
  !(all_dates %in% us_holidays) & 
  !(all_dates %in% columbus_days) & 
  !(all_dates %in% black_fridays) & 
  !(all_dates %in% christmaseve_to_new_years) & 
  format(all_dates, "%m-%d") != "11-11"
]

# Data Preparation
df <- df |> 
  mutate(
    pre_pandemic = date < as.Date("2020-03-01"),
    post_pandemic = date >= as.Date("2021-10-01"),
    pandemic = date >= as.Date("2020-03-01") & date < as.Date("2021-10-01"),
    pandemic_levels = case_when(
      pre_pandemic ~ "Pre-pandemic",
      pandemic ~ "Pandemic",
      post_pandemic ~ "Post-pandemic"
    ),
    weekend = weekdays(date) %in% c("Saturday", "Sunday"),
    working_day = date %in% working_days,
    rush_hour = working_day & hour %in% c(7, 8, 9, 17, 18, 19),
    season = case_when(
      month(date) %in% c(12, 1, 2) ~ "Winter",
      month(date) %in% c(3, 4, 5) ~ "Spring",
      month(date) %in% c(6, 7, 8) ~ "Summer",
      month(date) %in% c(9, 10, 11) ~ "Fall"
    ),
    temperature_bin = case_when(
      temperature <= -10 ~ "<= -10",
      temperature > -10 & temperature <= 0 ~ "-10-0",
      temperature > 0 & temperature <= 15 ~ "0-15",
      temperature > 15 & temperature <= 30 ~ "15-30",
      temperature > 30 ~ "> 30"
    ),
    rain = precipitation != 0,
    temperature_change = case_when(
      temperature_change_since_prev_day > 5 ~ "Increase in temperature",
      temperature_change_since_prev_day < -5 ~ "Decrease in temperature",
      TRUE ~ "No significant change"
    )
  )
```

```{r}
ui <- fluidPage(
  titlePanel("Interactive Heatmap with Filters"),
  sidebarLayout(
    sidebarPanel(
      selectInput("pandemic_filter", "Pandemic Levels:", 
                  choices = c("All", unique(df$pandemic_levels)), 
                  selected = "All"),
      selectInput("season_filter", "Season:", 
                  choices = c("All", unique(df$season)), 
                  selected = "All"),
      checkboxInput("rush_hour_filter", "Rush Hour (Yes/No)", value = FALSE),
      checkboxInput("weekend_filter", "Weekend (Yes/No)", value = FALSE),
      selectInput("temp_bin_filter", "Temperature Bin:", 
                  choices = c("All", unique(df$temperature_bin)), 
                  selected = "All"),
      checkboxInput("rain_filter", "Rain (Yes/No)", value = FALSE),
      selectInput("temp_change_filter", "Temperature Change:", 
                  choices = c("All", unique(df$temperature_change)), 
                  selected = "All")
    ),
    mainPanel(
      plotlyOutput("heatmap")
    )
  )
)
```

```{r}
server <- function(input, output) {
  filtered_data <- reactive({
    data <- df %>%
      filter(
        (pandemic_levels == input$pandemic_filter | input$pandemic_filter == "All"),
        (season == input$season_filter | input$season_filter == "All"),
        (rush_hour == input$rush_hour_filter | input$rush_hour_filter == FALSE),
        (weekend == input$weekend_filter | input$weekend_filter == FALSE),
        (temperature_bin == input$temp_bin_filter | input$temp_bin_filter == "All"),
        (rain == input$rain_filter | input$rain_filter == FALSE),
        (temperature_change == input$temp_change_filter | input$temp_change_filter == "All")
      ) %>%
      mutate(day = wday(date, label = TRUE)) %>%
      group_by(day, hour) %>%
      summarize(avg_trips = mean(trip_count, na.rm = TRUE), .groups = "drop")
    
    data
  })
  
  output$heatmap <- renderPlotly({
    data <- filtered_data()
    
    plot <- ggplot(data, aes(x = day, y = hour, fill = avg_trips)) +
      geom_tile(color = "white") +
      scale_fill_gradient(low = "white", high = "red", name = "Avg Trips") +
      labs(
        title = "Interactive Heatmap",
        x = "Day of the Week",
        y = "Hour"
      ) +
      scale_y_continuous(breaks = seq(0, 23, by = 3)) +
      theme_minimal()
    
    ggplotly(plot)
  })
}
```

```{r}
shinyApp(ui, server)
```

